/* The following code was generated by JFlex 1.4.3 on 11/5/10 12:17 AM */

/* A lexical analyzer for grammar of Top Tree Friendly Language TFL. */

package org.fantomery.ttinterpreter.ttlangs.tfl;

import java_cup.runtime.*;
import org.fantomery.ttinterpreter.ttlangs.tfl.TFLCompiler.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/5/10 12:17 AM from the specification file
 * <tt>TFL.flex</tt>
 */
class lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int STRING = 2;
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\51\1\73"+
    "\3\0\1\41\1\0\1\42\1\43\1\5\1\37\1\67\1\40\1\11"+
    "\1\4\12\10\1\0\1\70\1\52\1\36\1\53\2\0\1\62\3\6"+
    "\1\64\1\56\2\6\1\54\3\6\1\61\1\55\2\6\1\72\1\60"+
    "\1\65\1\66\3\6\1\63\2\6\1\44\1\74\1\45\1\0\1\7"+
    "\1\0\1\12\1\32\1\26\1\34\1\24\1\35\1\14\1\21\1\17"+
    "\1\71\1\6\1\13\1\22\1\31\1\15\1\57\1\6\1\16\1\30"+
    "\1\20\1\27\1\23\1\6\1\25\1\33\1\6\1\46\1\50\1\47"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\6\5\1\11\1\5\1\12\2\5\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\1\1\25\1\26\5\5\1\27\1\30\1\5\1\31"+
    "\1\32\1\33\1\34\2\0\1\35\1\36\1\0\10\5"+
    "\1\37\16\5\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\12\5\1\51\1\52\1\53\1\54"+
    "\1\0\1\55\11\5\1\56\23\5\1\57\1\60\4\5"+
    "\1\61\2\5\1\62\2\5\1\63\1\5\1\64\15\5"+
    "\1\65\4\5\1\66\1\5\1\67\1\5\1\70\7\5"+
    "\1\71\2\5\1\72\3\5\1\73\1\74\1\75\1\5"+
    "\1\76\1\77\1\100\5\5\1\101\1\102\1\5\1\103"+
    "\1\104\1\105\1\106\1\5\1\107\5\5\1\110\3\5"+
    "\1\111\1\112\1\5\1\113\1\114\21\5\1\115\17\5"+
    "\1\116\12\5\1\117\1\5\1\120\11\5\1\121\4\5"+
    "\1\122\6\5\1\123\1\124\1\125\4\5\1\126\3\5"+
    "\1\127\2\5\1\130\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\172\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\172\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\172\0\172\0\172\0\172\0\172\0\172"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763"+
    "\0\u07a0\0\172\0\172\0\u07dd\0\172\0\u081a\0\172\0\u0857"+
    "\0\u0894\0\u08d1\0\172\0\172\0\u090e\0\u094b\0\u0988\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u016e\0\u0b33\0\u0b70"+
    "\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\172\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\172"+
    "\0\172\0\172\0\172\0\u10eb\0\u090e\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u016e\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535"+
    "\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u016e\0\u016e\0\u17d4\0\u1811\0\u184e\0\u188b"+
    "\0\u016e\0\u18c8\0\u1905\0\u016e\0\u1942\0\u197f\0\u016e\0\u19bc"+
    "\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4"+
    "\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u016e\0\u1e80\0\u016e\0\u1ebd\0\u016e"+
    "\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u016e"+
    "\0\u20a5\0\u20e2\0\u016e\0\u211f\0\u215c\0\u2199\0\u016e\0\u016e"+
    "\0\u016e\0\u21d6\0\u2213\0\u016e\0\u016e\0\u2250\0\u228d\0\u22ca"+
    "\0\u2307\0\u2344\0\u016e\0\u016e\0\u2381\0\u016e\0\u016e\0\u016e"+
    "\0\u23be\0\u23fb\0\u016e\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c"+
    "\0\u016e\0\u2569\0\u25a6\0\u25e3\0\u016e\0\u016e\0\u2620\0\u016e"+
    "\0\u016e\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb"+
    "\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3"+
    "\0\u29f0\0\u2a2d\0\u016e\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e"+
    "\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46"+
    "\0\u2d83\0\u2dc0\0\u016e\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1"+
    "\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u016e\0\u305f\0\u016e"+
    "\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247"+
    "\0\u3284\0\u016e\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u016e\0\u33b5"+
    "\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u016e\0\u016e\0\u016e"+
    "\0\u3523\0\u3560\0\u359d\0\u35da\0\u016e\0\u3617\0\u3654\0\u3691"+
    "\0\u016e\0\u36ce\0\u370b\0\u016e\0\u016e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\2\10\1\15\1\16\1\17\2\10"+
    "\1\20\1\21\1\10\1\22\1\10\1\23\1\10\1\24"+
    "\1\10\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\2\10\1\46\1\47\1\50\2\10\1\51"+
    "\2\10\1\52\1\53\1\54\1\10\1\55\1\3\1\56"+
    "\2\0\70\56\1\57\1\60\77\0\1\5\76\0\1\61"+
    "\1\62\30\0\1\63\74\0\1\64\44\0\3\10\1\0"+
    "\24\10\16\0\13\10\2\0\2\10\12\0\1\11\1\65"+
    "\71\0\3\10\1\0\1\10\1\66\2\10\1\67\17\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\12\10"+
    "\1\70\11\10\16\0\3\10\1\71\7\10\2\0\2\10"+
    "\10\0\3\10\1\0\5\10\1\72\4\10\1\73\11\10"+
    "\16\0\3\10\1\74\7\10\2\0\2\10\10\0\3\10"+
    "\1\0\17\10\1\75\3\10\1\76\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\4\10\1\77\17\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\1\100\11\10"+
    "\1\101\11\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\1\10\1\102\22\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\1\10\1\103\1\10\1\104\1\105"+
    "\2\10\1\106\14\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\6\10\1\107\3\10\1\110\11\10\16\0"+
    "\3\10\1\111\7\10\2\0\2\10\10\0\3\10\1\0"+
    "\3\10\1\112\20\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\12\10\1\113\11\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\1\114\23\10\16\0\13\10"+
    "\2\0\2\10\40\0\1\115\74\0\1\116\74\0\1\117"+
    "\74\0\1\120\2\0\1\121\103\0\1\122\62\0\1\123"+
    "\74\0\1\124\74\0\1\125\44\0\3\10\1\0\10\10"+
    "\1\126\13\10\16\0\3\10\1\127\7\10\2\0\2\10"+
    "\10\0\3\10\1\0\1\130\2\10\1\131\20\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\10\10\1\132"+
    "\13\10\16\0\3\10\1\133\7\10\2\0\2\10\10\0"+
    "\3\10\1\0\24\10\16\0\1\134\5\10\1\135\4\10"+
    "\2\0\2\10\10\0\3\10\1\0\24\10\16\0\7\10"+
    "\1\136\3\10\2\0\2\10\10\0\3\10\1\0\3\10"+
    "\1\137\20\10\16\0\13\10\2\0\2\10\2\0\1\56"+
    "\2\0\70\56\20\0\1\140\1\0\1\141\10\0\1\142"+
    "\41\0\1\143\1\0\1\61\1\4\1\5\72\61\5\62"+
    "\1\144\67\62\10\0\1\145\72\0\3\10\1\0\2\10"+
    "\1\146\21\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\4\10\1\147\17\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\23\10\1\150\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\3\10\1\151\20\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\2\10\1\152"+
    "\21\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\1\153\23\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\3\10\1\154\20\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\6\10\1\155\15\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\15\10\1\156\6\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\4\10"+
    "\1\157\17\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\4\10\1\160\17\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\16\10\1\161\5\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\15\10\1\162\6\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\10\10"+
    "\1\163\13\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\12\10\1\164\11\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\5\10\1\165\16\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\4\10\1\166\17\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\1\10"+
    "\1\167\22\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\1\10\1\170\22\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\3\10\1\171\1\172\17\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\16\10\1\173"+
    "\5\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\1\10\1\174\22\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\24\10\16\0\1\175\12\10\2\0\2\10"+
    "\10\0\3\10\1\0\24\10\16\0\1\176\12\10\2\0"+
    "\2\10\10\0\3\10\1\0\6\10\1\177\15\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\5\10\1\200"+
    "\16\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\24\10\16\0\1\201\12\10\2\0\2\10\10\0\3\10"+
    "\1\0\24\10\16\0\1\202\12\10\2\0\2\10\10\0"+
    "\3\10\1\0\24\10\16\0\1\10\1\203\11\10\2\0"+
    "\2\10\10\0\3\10\1\0\24\10\16\0\7\10\1\204"+
    "\3\10\2\0\2\10\10\0\3\10\1\0\24\10\16\0"+
    "\1\205\12\10\2\0\2\10\10\0\3\10\1\0\5\10"+
    "\1\206\16\10\16\0\13\10\2\0\2\10\2\0\4\62"+
    "\1\5\1\144\67\62\6\0\3\10\1\0\3\10\1\207"+
    "\20\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\1\210\23\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\6\10\1\211\15\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\5\10\1\212\16\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\7\10\1\213\14\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\1\10"+
    "\1\214\22\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\5\10\1\215\16\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\12\10\1\216\11\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\12\10\1\217\11\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\6\10"+
    "\1\220\15\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\12\10\1\221\11\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\16\10\1\222\5\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\10\10\1\223\13\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\1\224"+
    "\23\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\1\10\1\225\22\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\5\10\1\226\16\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\12\10\1\227\11\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\5\10\1\230"+
    "\16\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\1\10\1\231\22\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\22\10\1\232\1\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\6\10\1\233\15\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\16\10\1\234"+
    "\5\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\24\10\16\0\1\10\1\235\11\10\2\0\2\10\10\0"+
    "\3\10\1\0\24\10\16\0\1\10\1\236\11\10\2\0"+
    "\2\10\10\0\3\10\1\0\7\10\1\237\14\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\17\10\1\240"+
    "\4\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\24\10\16\0\1\10\1\241\11\10\2\0\2\10\10\0"+
    "\3\10\1\0\24\10\16\0\1\10\1\242\11\10\2\0"+
    "\2\10\10\0\3\10\1\0\24\10\16\0\11\10\1\243"+
    "\1\10\2\0\2\10\10\0\3\10\1\0\17\10\1\244"+
    "\4\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\4\10\1\245\17\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\21\10\1\246\2\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\17\10\1\247\4\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\6\10\1\250"+
    "\15\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\17\10\1\251\4\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\2\10\1\252\21\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\12\10\1\253\11\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\5\10\1\254"+
    "\16\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\6\10\1\255\15\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\3\10\1\256\20\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\6\10\1\257\15\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\22\10\1\260"+
    "\1\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\17\10\1\261\4\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\14\10\1\262\7\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\6\10\1\263\15\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\12\10\1\264"+
    "\11\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\12\10\1\265\11\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\4\10\1\266\17\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\12\10\1\267\11\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\24\10\16\0"+
    "\2\10\1\270\10\10\2\0\2\10\10\0\3\10\1\0"+
    "\24\10\16\0\2\10\1\271\10\10\2\0\2\10\10\0"+
    "\1\10\1\272\1\10\1\0\24\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\6\10\1\273\15\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\24\10\16\0"+
    "\2\10\1\274\10\10\2\0\2\10\10\0\3\10\1\0"+
    "\24\10\16\0\2\10\1\275\10\10\2\0\2\10\10\0"+
    "\3\10\1\0\24\10\16\0\12\10\1\276\2\0\2\10"+
    "\10\0\3\10\1\0\5\10\1\277\16\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\6\10\1\300\15\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\6\10"+
    "\1\301\15\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\12\10\1\302\11\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\13\10\1\303\10\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\23\10\1\304\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\12\10\1\305"+
    "\11\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\17\10\1\306\4\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\12\10\1\307\11\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\2\10\1\310\21\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\6\10\1\311"+
    "\15\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\1\312\23\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\4\10\1\313\17\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\3\10\1\314\20\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\1\315\13\10\1\316"+
    "\7\10\16\0\3\10\1\317\7\10\2\0\2\10\10\0"+
    "\1\10\1\320\1\10\1\0\24\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\24\10\16\0\11\10\1\321"+
    "\1\10\2\0\2\10\10\0\3\10\1\0\6\10\1\322"+
    "\15\10\16\0\13\10\2\0\2\10\10\0\1\10\1\323"+
    "\1\10\1\0\24\10\16\0\13\10\2\0\2\10\10\0"+
    "\1\10\1\324\1\10\1\0\24\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\4\10\1\325\17\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\4\10\1\326"+
    "\17\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\24\10\16\0\13\10\2\0\1\10\1\327\10\0\3\10"+
    "\1\0\17\10\1\330\4\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\21\10\1\331\2\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\17\10\1\332\4\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\7\10"+
    "\1\333\14\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\1\334\23\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\1\335\13\10\1\336\7\10\16\0\3\10"+
    "\1\337\7\10\2\0\2\10\10\0\3\10\1\0\7\10"+
    "\1\340\14\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\1\341\2\10\1\342\20\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\3\10\1\343\20\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\15\10\1\344"+
    "\6\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\22\10\1\345\1\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\5\10\1\346\16\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\4\10\1\347\17\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\17\10\1\350"+
    "\4\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\7\10\1\351\14\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\1\352\23\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\10\10\1\353\13\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\17\10\1\354\4\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\11\10"+
    "\1\355\12\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\11\10\1\356\12\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\12\10\1\357\11\10\16\0\13\10"+
    "\2\0\2\10\10\0\1\10\1\360\1\10\1\0\24\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\1\10"+
    "\1\361\22\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\12\10\1\362\11\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\22\10\1\363\1\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\5\10\1\364\16\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\4\10"+
    "\1\365\17\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\22\10\1\366\1\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\12\10\1\367\11\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\12\10\1\370\11\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\16\10"+
    "\1\371\5\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\24\10\16\0\3\10\1\372\7\10\2\0\2\10"+
    "\10\0\3\10\1\0\22\10\1\373\1\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\17\10\1\374\4\10"+
    "\16\0\13\10\2\0\2\10\10\0\1\10\1\375\1\10"+
    "\1\0\24\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\1\10\1\376\22\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\12\10\1\377\11\10\16\0\13\10"+
    "\2\0\2\10\10\0\1\10\1\u0100\1\10\1\0\24\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\4\10"+
    "\1\u0101\17\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\4\10\1\u0102\17\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\6\10\1\u0103\15\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\1\u0104\2\10\1\u0105"+
    "\20\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\6\10\1\u0106\15\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\24\10\16\0\3\10\1\u0107\7\10\2\0"+
    "\2\10\10\0\3\10\1\0\22\10\1\u0108\1\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\17\10\1\u0109"+
    "\4\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\4\10\1\u010a\17\10\16\0\13\10\2\0\2\10\10\0"+
    "\1\10\1\u010b\1\10\1\0\24\10\16\0\13\10\2\0"+
    "\2\10\10\0\1\10\1\u010c\1\10\1\0\24\10\16\0"+
    "\13\10\2\0\2\10\10\0\3\10\1\0\5\10\1\u010d"+
    "\16\10\16\0\13\10\2\0\2\10\10\0\3\10\1\0"+
    "\6\10\1\u010e\15\10\16\0\13\10\2\0\2\10\10\0"+
    "\3\10\1\0\5\10\1\u010f\16\10\16\0\13\10\2\0"+
    "\2\10\10\0\3\10\1\0\1\u0110\2\10\1\u0111\20\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\6\10"+
    "\1\u0112\15\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\24\10\16\0\3\10\1\u0113\7\10\2\0\2\10"+
    "\10\0\3\10\1\0\4\10\1\u0114\17\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\1\10\1\u0115\22\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\3\10"+
    "\1\u0116\20\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\7\10\1\u0117\14\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\17\10\1\u0118\4\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\6\10\1\u0119\15\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\5\10"+
    "\1\u011a\16\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\3\10\1\u011b\20\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\24\10\16\0\3\10\1\u011c\7\10"+
    "\2\0\2\10\10\0\3\10\1\0\24\10\16\0\3\10"+
    "\1\u011d\7\10\2\0\2\10\10\0\3\10\1\0\17\10"+
    "\1\u011e\4\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\6\10\1\u011f\15\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\7\10\1\u0120\14\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\17\10\1\u0121\4\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\5\10"+
    "\1\u0122\16\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\3\10\1\u0123\20\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\3\10\1\u0124\20\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\6\10\1\u0125\15\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\17\10"+
    "\1\u0126\4\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\5\10\1\u0127\16\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\5\10\1\u0128\16\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\6\10\1\u0129\15\10"+
    "\16\0\13\10\2\0\2\10\10\0\3\10\1\0\17\10"+
    "\1\u012a\4\10\16\0\13\10\2\0\2\10\10\0\3\10"+
    "\1\0\17\10\1\u012b\4\10\16\0\13\10\2\0\2\10"+
    "\10\0\3\10\1\0\6\10\1\u012c\15\10\16\0\13\10"+
    "\2\0\2\10\10\0\3\10\1\0\6\10\1\u012d\15\10"+
    "\16\0\13\10\2\0\2\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14152];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\4\1\1\11\20\1\6\11"+
    "\11\1\2\11\1\1\1\11\1\1\1\11\1\1\2\0"+
    "\2\11\1\0\27\1\11\11\12\1\4\11\1\0\311\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { return symbol(sym.NOT_EQUAL);
          }
        case 90: break;
        case 80: 
          { return symbol(sym.POINT_CHILD);
          }
        case 91: break;
        case 48: 
          { return symbol(sym.MAX);
          }
        case 92: break;
        case 11: 
          { return symbol(sym.ASSIGN);
          }
        case 93: break;
        case 9: 
          { return symbol(sym.C);
          }
        case 94: break;
        case 86: 
          { return symbol(sym.POINT_AND_POINT);
          }
        case 95: break;
        case 37: 
          { return symbol(sym.OR);
          }
        case 96: break;
        case 15: 
          { return symbol(sym.LPAREN);
          }
        case 97: break;
        case 10: 
          { return symbol(sym.B);
          }
        case 98: break;
        case 68: 
          { return symbol(sym.CREATE);
          }
        case 99: break;
        case 8: 
          { return symbol(sym.A);
          }
        case 100: break;
        case 14: 
          { return symbol(sym.AMPERSAND);
          }
        case 101: break;
        case 66: 
          { return symbol(sym.ELSEIF);
          }
        case 102: break;
        case 55: 
          { return symbol(sym.ARRAY);
          }
        case 103: break;
        case 88: 
          { return symbol(sym.LPOINT_OVER_RPOINT);
          }
        case 104: break;
        case 21: 
          { return symbol(sym.LESS);
          }
        case 105: break;
        case 58: 
          { return symbol(sym.SPLIT);
          }
        case 106: break;
        case 13: 
          { return symbol(sym.MINUS);
          }
        case 107: break;
        case 52: 
          { return symbol(sym.ELSE);
          }
        case 108: break;
        case 5: 
          { return symbol(sym.VARIABLE, new String(yytext()));
          }
        case 109: break;
        case 43: 
          { string.append('\n');
          }
        case 110: break;
        case 32: 
          { return symbol(sym.EQUAL);
          }
        case 111: break;
        case 67: 
          { return symbol(sym.COMMON);
          }
        case 112: break;
        case 44: 
          { string.append('\"');
          }
        case 113: break;
        case 62: 
          { return symbol(sym.POINT);
          }
        case 114: break;
        case 7: 
          { return symbol(sym.DOT);
          }
        case 115: break;
        case 56: 
          { return symbol(sym.RIGHT);
          }
        case 116: break;
        case 35: 
          { return symbol(sym.AMPERSAND_ASSIGN);
          }
        case 117: break;
        case 61: 
          { return symbol(sym.IPINF, new String("Finiteness.POSITIVE_INFINITY"));
          }
        case 118: break;
        case 36: 
          { return symbol(sym.AND);
          }
        case 119: break;
        case 34: 
          { return symbol(sym.MINUS_ASSIGN);
          }
        case 120: break;
        case 79: 
          { return symbol(sym.PATH_PARENT);
          }
        case 121: break;
        case 70: 
          { return symbol(sym.SELECT);
          }
        case 122: break;
        case 45: 
          { return symbol(sym.R_NUMBER, new String(yytext()));
          }
        case 123: break;
        case 89: 
          { return symbol(sym.RPOINT_OVER_LPOINT);
          }
        case 124: break;
        case 41: 
          { string.append('\r');
          }
        case 125: break;
        case 39: 
          { return symbol(sym.LESS_EQUAL);
          }
        case 126: break;
        case 64: 
          { return symbol(sym.RPINF, new String("Finiteness.POSITIVE_INFINITY"));
          }
        case 127: break;
        case 25: 
          { string.setLength(0); yybegin(STRING);
          }
        case 128: break;
        case 33: 
          { return symbol(sym.PLUS_ASSIGN);
          }
        case 129: break;
        case 31: 
          { return symbol(sym.IF);
          }
        case 130: break;
        case 42: 
          { string.append('\t');
          }
        case 131: break;
        case 75: 
          { return symbol(sym.DATA_TYPE, DataType.BOOLEAN);
          }
        case 132: break;
        case 84: 
          { return symbol(sym.PATH_AND_POINT);
          }
        case 133: break;
        case 27: 
          { yybegin(YYINITIAL); 
                                  return symbol(sym.STRING_LITERAL, new String("\"" + string.toString() + "\""));
          }
        case 134: break;
        case 87: 
          { return symbol(sym.LPOINT_AND_RPOINT);
          }
        case 135: break;
        case 24: 
          { return symbol(sym.SEMI);
          }
        case 136: break;
        case 23: 
          { return symbol(sym.COMMA);
          }
        case 137: break;
        case 30: 
          { return symbol(sym.TIMES_ASSIGN);
          }
        case 138: break;
        case 83: 
          { return symbol(sym.SELECT_QUESTION);
          }
        case 139: break;
        case 6: 
          { return symbol(sym.I_NUMBER, new String(yytext()));
          }
        case 140: break;
        case 22: 
          { return symbol(sym.GREATER);
          }
        case 141: break;
        case 51: 
          { return symbol(sym.TRUE);
          }
        case 142: break;
        case 60: 
          { return symbol(sym.IMINF, new String("Finiteness.NEGATIVE_INFINITY"));
          }
        case 143: break;
        case 20: 
          { return symbol(sym.RBRACE);
          }
        case 144: break;
        case 12: 
          { return symbol(sym.PLUS);
          }
        case 145: break;
        case 46: 
          { return symbol(sym.VAR);
          }
        case 146: break;
        case 77: 
          { return symbol(sym.ALGORITHM);
          }
        case 147: break;
        case 81: 
          { return symbol(sym.POINT_PARENT);
          }
        case 148: break;
        case 47: 
          { return symbol(sym.MIN);
          }
        case 149: break;
        case 50: 
          { return symbol(sym.DATA_TYPE, DataType.REAL);
          }
        case 150: break;
        case 65: 
          { return symbol(sym.VERTEX);
          }
        case 151: break;
        case 72: 
          { return symbol(sym.EXISTS);
          }
        case 152: break;
        case 63: 
          { return symbol(sym.RMINF, new String("Finiteness.NEGATIVE_INFINITY"));
          }
        case 153: break;
        case 4: 
          { return symbol(sym.TIMES);
          }
        case 154: break;
        case 17: 
          { return symbol(sym.LBRACKET);
          }
        case 155: break;
        case 82: 
          { return symbol(sym.PATH_AND_PATH);
          }
        case 156: break;
        case 28: 
          { string.append('\\');
          }
        case 157: break;
        case 19: 
          { return symbol(sym.LBRACE);
          }
        case 158: break;
        case 71: 
          { return symbol(sym.BORDER);
          }
        case 159: break;
        case 74: 
          { return symbol(sym.CLUSTER);
          }
        case 160: break;
        case 18: 
          { return symbol(sym.RBRACKET);
          }
        case 161: break;
        case 49: 
          { return symbol(sym.LEFT);
          }
        case 162: break;
        case 1: 
          { throw new Error("Illegal character <" + yytext() + "> at line(position) "
                                              + yyline + "(" + yycolumn + ")!" );
          }
        case 163: break;
        case 3: 
          { return symbol(sym.DIVIDE);
          }
        case 164: break;
        case 29: 
          { return symbol(sym.DIVIDE_ASSIGN);
          }
        case 165: break;
        case 73: 
          { return symbol(sym.DATA_TYPE, DataType.INTEGER);
          }
        case 166: break;
        case 2: 
          { /* ignore */
          }
        case 167: break;
        case 76: 
          { return symbol(sym.DESTROY);
          }
        case 168: break;
        case 54: 
          { return symbol(sym.JOIN);
          }
        case 169: break;
        case 40: 
          { return symbol(sym.GREATER_EQUAL);
          }
        case 170: break;
        case 16: 
          { return symbol(sym.RPAREN);
          }
        case 171: break;
        case 85: 
          { return symbol(sym.POINT_AND_PATH);
          }
        case 172: break;
        case 26: 
          { string.append( yytext() );
          }
        case 173: break;
        case 78: 
          { return symbol(sym.PATH_CHILD);
          }
        case 174: break;
        case 69: 
          { return symbol(sym.DATA_TYPE, DataType.STRING);
          }
        case 175: break;
        case 53: 
          { return symbol(sym.PATH);
          }
        case 176: break;
        case 59: 
          { return symbol(sym.FALSE);
          }
        case 177: break;
        case 57: 
          { return symbol(sym.CHILD);
          }
        case 178: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
