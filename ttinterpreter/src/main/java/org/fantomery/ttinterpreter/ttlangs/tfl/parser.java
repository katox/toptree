
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 05 00:17:58 CET 2010
//----------------------------------------------------

package org.fantomery.ttinterpreter.ttlangs.tfl;

import java.util.ArrayList;
import org.fantomery.ttinterpreter.ttlangs.tfl.TFLExpression;
import org.fantomery.ttinterpreter.ttlangs.tfl.TFLCompiler;
import org.fantomery.ttinterpreter.ttlangs.tfl.TFLCompiler.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 05 00:17:58 CET 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\013\000\002\012" +
    "\006\000\002\013\006\000\002\016\005\000\002\016\006" +
    "\000\002\026\003\000\002\026\005\000\002\014\006\000" +
    "\002\017\005\000\002\017\006\000\002\027\003\000\002" +
    "\027\006\000\002\015\002\000\002\015\006\000\002\020" +
    "\005\000\002\020\006\000\002\021\002\000\002\021\006" +
    "\000\002\022\002\000\002\022\006\000\002\023\002\000" +
    "\002\023\003\000\002\023\003\000\002\023\004\000\002" +
    "\023\004\000\002\024\006\000\002\025\006\000\002\036" +
    "\002\000\002\036\006\000\002\037\002\000\002\037\006" +
    "\000\002\051\005\000\002\052\005\000\002\053\002\000" +
    "\002\053\003\000\002\053\003\000\002\053\004\000\002" +
    "\053\004\000\002\054\002\000\002\054\003\000\002\054" +
    "\003\000\002\054\004\000\002\054\004\000\002\055\006" +
    "\000\002\056\006\000\002\057\006\000\002\060\006\000" +
    "\002\061\002\000\002\061\007\000\002\050\003\000\002" +
    "\050\005\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\040\002\000\002\040\007\000" +
    "\002\041\023\000\002\003\003\000\002\003\005\000\002" +
    "\003\005\000\002\003\010\000\002\003\007\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\033\003\000\002\033\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\042" +
    "\002\000\002\042\004\000\002\042\004\000\002\043\006" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\004\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\005\000\002\010\010\000\002\010" +
    "\010\000\002\006\005\000\002\006\005\000\002\005\006" +
    "\000\002\005\006\000\002\011\003\000\002\011\005\000" +
    "\002\004\005\000\002\044\013\000\002\045\002\000\002" +
    "\045\012\000\002\046\002\000\002\046\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\015\006\001\002\000\004\002\u010c\001" +
    "\002\000\004\016\012\001\002\000\004\011\007\001\002" +
    "\000\004\027\010\001\002\000\004\012\011\001\002\000" +
    "\004\016\uffff\001\002\000\004\011\u0103\001\002\000\004" +
    "\017\015\001\002\000\020\002\ufff4\020\035\021\ufff4\022" +
    "\ufff4\103\ufff4\104\ufff4\120\ufff4\001\002\000\004\011\016" +
    "\001\002\000\006\025\022\026\017\001\002\000\004\027" +
    "\ufff6\001\002\000\004\012\034\001\002\000\004\027\027" +
    "\001\002\000\004\007\023\001\002\000\004\026\024\001" +
    "\002\000\004\010\025\001\002\000\004\027\ufff5\001\002" +
    "\000\006\004\030\005\031\001\002\000\006\004\ufffb\005" +
    "\ufffb\001\002\000\004\027\033\001\002\000\010\012\ufff8" +
    "\025\022\026\017\001\002\000\004\012\ufff7\001\002\000" +
    "\006\004\ufffa\005\ufffa\001\002\000\020\002\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\103\ufff9\104\ufff9\120\ufff9\001\002\000" +
    "\004\011\372\001\002\000\016\002\ufff0\021\037\022\ufff0" +
    "\103\ufff0\104\ufff0\120\ufff0\001\002\000\004\011\367\001" +
    "\002\000\014\002\uffee\022\041\103\uffee\104\uffee\120\uffee" +
    "\001\002\000\004\011\350\001\002\000\012\002\uffe5\103" +
    "\043\104\uffe5\120\uffe5\001\002\000\004\011\342\001\002" +
    "\000\010\002\uffe3\104\046\120\uffe3\001\002\000\006\002" +
    "\uffc6\120\314\001\002\000\004\011\047\001\002\000\032" +
    "\012\uffda\105\uffda\106\uffda\107\051\110\053\111\uffda\112" +
    "\uffda\113\uffda\114\uffda\115\uffda\116\uffda\117\uffda\001\002" +
    "\000\004\012\312\001\002\000\004\011\307\001\002\000" +
    "\030\012\uffd9\105\uffd9\106\uffd9\110\053\111\uffd9\112\uffd9" +
    "\113\uffd9\114\uffd9\115\uffd9\116\uffd9\117\uffd9\001\002\000" +
    "\004\011\303\001\002\000\026\012\uffdf\105\057\106\063" +
    "\111\uffdf\112\uffdf\113\uffdf\114\uffdf\115\uffdf\116\uffdf\117" +
    "\uffdf\001\002\000\030\012\uffd8\105\uffd8\106\uffd8\107\051" +
    "\111\uffd8\112\uffd8\113\uffd8\114\uffd8\115\uffd8\116\uffd8\117" +
    "\uffd8\001\002\000\026\012\uffd6\105\uffd6\106\uffd6\111\uffd6" +
    "\112\uffd6\113\uffd6\114\uffd6\115\uffd6\116\uffd6\117\uffd6\001" +
    "\002\000\004\011\300\001\002\000\022\012\uffd1\111\uffd1" +
    "\112\uffd1\113\uffd1\114\uffd1\115\uffd1\116\uffd1\117\uffd1\001" +
    "\002\000\030\012\uffdd\105\057\107\uffdd\110\uffdd\111\uffdd" +
    "\112\uffdd\113\uffdd\114\uffdd\115\uffdd\116\uffdd\117\uffdd\001" +
    "\002\000\030\012\uffde\106\063\107\uffde\110\uffde\111\uffde" +
    "\112\uffde\113\uffde\114\uffde\115\uffde\116\uffde\117\uffde\001" +
    "\002\000\004\011\064\001\002\000\030\012\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\046\uffa4\001\002\000\030\012\105\027\101" +
    "\030\074\031\071\032\070\033\104\034\073\035\103\036" +
    "\075\037\066\046\102\001\002\000\006\006\uffb8\014\uffb8" +
    "\001\002\000\032\012\uffa2\027\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\046\uffa2" +
    "\121\uffa2\001\002\000\004\006\uffbc\001\002\000\004\006" +
    "\uffbd\001\002\000\032\012\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\046" +
    "\uffa3\121\uffa3\001\002\000\006\006\uffba\014\uffba\001\002" +
    "\000\004\006\uffbe\001\002\000\006\006\uffb7\014\uffb7\001" +
    "\002\000\016\040\254\041\250\042\246\043\252\044\251" +
    "\045\253\001\002\000\004\006\236\001\002\000\004\006" +
    "\234\001\002\000\056\004\uffc3\005\uffc3\010\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\051\uffc3\052" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\070\uffc3\001\002\000" +
    "\004\007\106\001\002\000\006\006\uffb9\014\uffb9\001\002" +
    "\000\004\006\uffbb\001\002\000\030\012\uffd4\105\uffd4\107" +
    "\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\114\uffd4\115\uffd4" +
    "\116\uffd4\117\uffd4\001\002\000\062\007\112\027\101\030" +
    "\074\031\071\032\070\033\104\034\073\035\103\036\075" +
    "\037\066\053\111\054\120\063\107\064\121\071\130\072" +
    "\125\073\122\074\114\075\131\076\133\077\113\100\116" +
    "\101\132\102\115\001\002\000\006\074\232\075\233\001" +
    "\002\000\042\004\uff92\005\uff92\010\uff92\051\uff92\052\uff92" +
    "\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063" +
    "\uff92\064\uff92\065\uff92\066\uff92\070\uff92\001\002\000\042" +
    "\004\uffa0\005\uffa0\010\uffa0\051\uffa0\052\uffa0\055\uffa0\056" +
    "\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0" +
    "\065\uffa0\066\uffa0\070\uffa0\001\002\000\062\007\112\027" +
    "\101\030\074\031\071\032\070\033\104\034\073\035\103" +
    "\036\075\037\066\053\111\054\120\063\107\064\121\071" +
    "\130\072\125\073\122\074\114\075\131\076\133\077\113" +
    "\100\116\101\132\102\115\001\002\000\042\004\uff9c\005" +
    "\uff9c\010\uff9c\051\uff9c\052\uff9c\055\uff9c\056\uff9c\057\uff9c" +
    "\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\070\uff9c\001\002\000\042\004\uff9b\005\uff9b\010\uff9b" +
    "\051\uff9b\052\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\070\uff9b" +
    "\001\002\000\042\004\uff9e\005\uff9e\010\uff9e\051\uff9e\052" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\070\uff9e\001\002\000" +
    "\042\004\uff98\005\uff98\010\uff98\051\uff98\052\uff98\055\uff98" +
    "\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064" +
    "\uff98\065\uff98\066\uff98\070\uff98\001\002\000\036\010\204" +
    "\051\142\052\160\055\147\056\153\057\154\060\146\061" +
    "\152\062\157\063\150\064\143\065\155\066\145\070\161" +
    "\001\002\000\042\004\uff9f\005\uff9f\010\uff9f\051\uff9f\052" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\066\uff9f\070\uff9f\001\002\000" +
    "\006\074\202\075\203\001\002\000\004\007\171\001\002" +
    "\000\042\004\uff93\005\uff93\010\uff93\051\uff93\052\uff93\055" +
    "\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93" +
    "\064\uff93\065\uff93\066\uff93\070\uff93\001\002\000\042\004" +
    "\uff91\005\uff91\010\uff91\051\uff91\052\uff91\055\uff91\056\uff91" +
    "\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065" +
    "\uff91\066\uff91\070\uff91\001\002\000\004\007\166\001\002" +
    "\000\042\004\uff8e\005\uff8e\010\uff8e\051\uff8e\052\uff8e\055" +
    "\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\064\uff8e\065\uff8e\066\uff8e\070\uff8e\001\002\000\042\004" +
    "\uff8d\005\uff8d\010\uff8d\051\uff8d\052\uff8d\055\uff8d\056\uff8d" +
    "\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065" +
    "\uff8d\066\uff8d\070\uff8d\001\002\000\004\007\134\001\002" +
    "\000\042\004\uff96\005\uff96\010\uff96\051\uff96\052\uff96\055" +
    "\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\066\uff96\070\uff96\001\002\000\042\004" +
    "\uff97\005\uff97\010\uff97\051\uff97\052\uff97\055\uff97\056\uff97" +
    "\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\066\uff97\070\uff97\001\002\000\042\004\uff9d\005\uff9d" +
    "\010\uff9d\051\uff9d\052\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\070\uff9d\001\002\000\062\007\112\027\101\030\074\031" +
    "\071\032\070\033\104\034\073\035\103\036\075\037\066" +
    "\053\111\054\120\063\107\064\121\071\130\072\125\073" +
    "\122\074\114\075\131\076\133\077\113\100\116\101\132" +
    "\102\115\001\002\000\040\004\uff85\010\uff85\051\142\052" +
    "\160\055\147\056\153\057\154\060\146\061\152\062\157" +
    "\063\150\064\143\065\155\066\145\070\161\001\002\000" +
    "\006\004\137\010\140\001\002\000\062\007\112\027\101" +
    "\030\074\031\071\032\070\033\104\034\073\035\103\036" +
    "\075\037\066\053\111\054\120\063\107\064\121\071\130" +
    "\072\125\073\122\074\114\075\131\076\133\077\113\100" +
    "\116\101\132\102\115\001\002\000\042\004\uff87\005\uff87" +
    "\010\uff87\051\uff87\052\uff87\055\uff87\056\uff87\057\uff87\060" +
    "\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87" +
    "\070\uff87\001\002\000\040\004\uff84\010\uff84\051\142\052" +
    "\160\055\147\056\153\057\154\060\146\061\152\062\157" +
    "\063\150\064\143\065\155\066\145\070\161\001\002\000" +
    "\062\007\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\053\uffaa\054\uffaa\063" +
    "\uffaa\064\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\001\002\000" +
    "\062\007\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\053\uffa7\054\uffa7\063" +
    "\uffa7\064\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\001\002\000" +
    "\062\007\112\027\101\030\074\031\071\032\070\033\104" +
    "\034\073\035\103\036\075\037\066\053\111\054\120\063" +
    "\107\064\121\071\130\072\125\073\122\074\114\075\131" +
    "\076\133\077\113\100\116\101\132\102\115\001\002\000" +
    "\062\007\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\053\uffa5\054\uffa5\063" +
    "\uffa5\064\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5" +
    "\076\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\001\002\000" +
    "\062\007\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\053\uffad\054\uffad\063" +
    "\uffad\064\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad" +
    "\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\001\002\000" +
    "\062\007\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\053\uffb0\054\uffb0\063" +
    "\uffb0\064\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0" +
    "\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\001\002\000" +
    "\062\007\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\053\uffa8\054\uffa8\063" +
    "\uffa8\064\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8" +
    "\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\001\002\000" +
    "\062\007\112\027\101\030\074\031\071\032\070\033\104" +
    "\034\073\035\103\036\075\037\066\053\111\054\120\063" +
    "\107\064\121\071\130\072\125\073\122\074\114\075\131" +
    "\076\133\077\113\100\116\101\132\102\115\001\002\000" +
    "\062\007\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\053\uffac\054\uffac\063" +
    "\uffac\064\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac" +
    "\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac\001\002\000" +
    "\062\007\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\053\uffaf\054\uffaf\063" +
    "\uffaf\064\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\001\002\000" +
    "\062\007\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\053\uffae\054\uffae\063" +
    "\uffae\064\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae" +
    "\076\uffae\077\uffae\100\uffae\101\uffae\102\uffae\001\002\000" +
    "\062\007\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\053\uffa6\054\uffa6\063" +
    "\uffa6\064\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\001\002\000" +
    "\062\007\112\027\101\030\074\031\071\032\070\033\104" +
    "\034\073\035\103\036\075\037\066\053\111\054\120\063" +
    "\107\064\121\071\130\072\125\073\122\074\114\075\131" +
    "\076\133\077\113\100\116\101\132\102\115\001\002\000" +
    "\062\007\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\053\uffab\054\uffab\063" +
    "\uffab\064\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab" +
    "\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab\001\002\000" +
    "\062\007\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\053\uffa9\054\uffa9\063" +
    "\uffa9\064\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9" +
    "\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\001\002\000" +
    "\062\007\112\027\101\030\074\031\071\032\070\033\104" +
    "\034\073\035\103\036\075\037\066\053\111\054\120\063" +
    "\107\064\121\071\130\072\125\073\122\074\114\075\131" +
    "\076\133\077\113\100\116\101\132\102\115\001\002\000" +
    "\042\004\uff8f\005\uff8f\010\uff8f\051\uff8f\052\uff8f\055\uff8f" +
    "\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064" +
    "\uff8f\065\155\066\145\070\uff8f\001\002\000\042\004\uff89" +
    "\005\uff89\010\uff89\051\142\052\160\055\147\056\153\057" +
    "\154\060\146\061\152\062\157\063\150\064\143\065\155" +
    "\066\145\070\161\001\002\000\042\004\uff88\005\uff88\010" +
    "\uff88\051\142\052\160\055\147\056\153\057\154\060\146" +
    "\061\152\062\157\063\150\064\143\065\155\066\145\070" +
    "\161\001\002\000\042\004\uff83\005\uff83\010\uff83\051\142" +
    "\052\160\055\147\056\153\057\154\060\146\061\152\062" +
    "\157\063\150\064\143\065\155\066\145\070\161\001\002" +
    "\000\062\007\112\027\101\030\074\031\071\032\070\033" +
    "\104\034\073\035\103\036\075\037\066\053\111\054\120" +
    "\063\107\064\121\071\130\072\125\073\122\074\114\075" +
    "\131\076\133\077\113\100\116\101\132\102\115\001\002" +
    "\000\006\004\137\010\170\001\002\000\042\004\uff86\005" +
    "\uff86\010\uff86\051\uff86\052\uff86\055\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066" +
    "\uff86\070\uff86\001\002\000\006\030\172\031\173\001\002" +
    "\000\004\006\177\001\002\000\004\006\174\001\002\000" +
    "\004\034\175\001\002\000\004\010\176\001\002\000\042" +
    "\004\uff8a\005\uff8a\010\uff8a\051\uff8a\052\uff8a\055\uff8a\056" +
    "\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a" +
    "\065\uff8a\066\uff8a\070\uff8a\001\002\000\004\034\200\001" +
    "\002\000\004\010\201\001\002\000\042\004\uff8b\005\uff8b" +
    "\010\uff8b\051\uff8b\052\uff8b\055\uff8b\056\uff8b\057\uff8b\060" +
    "\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b" +
    "\070\uff8b\001\002\000\042\004\uff99\005\uff99\010\uff99\051" +
    "\uff99\052\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99" +
    "\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\070\uff99\001" +
    "\002\000\042\004\uff94\005\uff94\010\uff94\051\uff94\052\uff94" +
    "\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063" +
    "\uff94\064\uff94\065\uff94\066\uff94\070\uff94\001\002\000\004" +
    "\011\205\001\002\000\030\012\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\046\uffa4\001\002\000\030\012\207\027\101\030\074\031" +
    "\071\032\070\033\104\034\073\035\103\036\075\037\066" +
    "\046\102\001\002\000\036\012\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81" +
    "\046\uff81\047\uff81\050\uff81\121\uff81\001\002\000\036\012" +
    "\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\046\uff7f\047\211\050\212\121" +
    "\uff7f\001\002\000\004\007\217\001\002\000\004\011\214" +
    "\001\002\000\032\012\uff82\027\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\046\uff82" +
    "\121\uff82\001\002\000\030\012\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\046\uffa4\001\002\000\030\012\216\027\101\030\074\031" +
    "\071\032\070\033\104\034\073\035\103\036\075\037\066" +
    "\046\102\001\002\000\032\012\uff7e\027\uff7e\030\uff7e\031" +
    "\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e" +
    "\046\uff7e\121\uff7e\001\002\000\062\007\112\027\101\030" +
    "\074\031\071\032\070\033\104\034\073\035\103\036\075" +
    "\037\066\053\111\054\120\063\107\064\121\071\130\072" +
    "\125\073\122\074\114\075\131\076\133\077\113\100\116" +
    "\101\132\102\115\001\002\000\036\010\221\051\142\052" +
    "\160\055\147\056\153\057\154\060\146\061\152\062\157" +
    "\063\150\064\143\065\155\066\145\070\161\001\002\000" +
    "\004\011\222\001\002\000\030\012\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\046\uffa4\001\002\000\030\012\224\027\101\030\074" +
    "\031\071\032\070\033\104\034\073\035\103\036\075\037" +
    "\066\046\102\001\002\000\036\012\uff80\027\uff80\030\uff80" +
    "\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037" +
    "\uff80\046\uff80\047\uff80\050\uff80\121\uff80\001\002\000\034" +
    "\051\142\052\160\055\147\056\153\057\154\060\146\061" +
    "\152\062\157\063\150\064\143\065\155\066\145\070\161" +
    "\001\002\000\036\010\231\051\uff91\052\uff91\055\uff91\056" +
    "\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91" +
    "\065\uff91\066\uff91\070\uff91\001\002\000\036\010\230\051" +
    "\uff8d\052\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\070\uff8d\001" +
    "\002\000\042\004\uff8c\005\uff8c\010\uff8c\051\uff8c\052\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063" +
    "\uff8c\064\uff8c\065\uff8c\066\uff8c\070\uff8c\001\002\000\042" +
    "\004\uff90\005\uff90\010\uff90\051\uff90\052\uff90\055\uff90\056" +
    "\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\066\uff90\070\uff90\001\002\000\042\004\uff9a\005" +
    "\uff9a\010\uff9a\051\uff9a\052\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066" +
    "\uff9a\070\uff9a\001\002\000\042\004\uff95\005\uff95\010\uff95" +
    "\051\uff95\052\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061" +
    "\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\070\uff95" +
    "\001\002\000\004\027\235\001\002\000\056\004\uffc2\005" +
    "\uffc2\010\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\051\uffc2\052\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\070\uffc2\001\002\000\014\027\240\034\073\035\103\036" +
    "\075\037\066\001\002\000\004\006\244\001\002\000\060" +
    "\004\uffc1\005\uffc1\010\uffc1\013\241\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\051\uffc1\052\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\070\uffc1\001\002\000\012\034\073" +
    "\035\103\036\075\037\066\001\002\000\004\014\243\001" +
    "\002\000\056\004\uffc0\005\uffc0\010\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\051\uffc0\052\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\066\uffc0\070\uffc0\001\002\000\004\027" +
    "\245\001\002\000\056\004\uffbf\005\uffbf\010\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\051\uffbf\052" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\070\uffbf\001\002\000" +
    "\062\007\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\053\uffb4\054\uffb4\063" +
    "\uffb4\064\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4" +
    "\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\001\002\000" +
    "\062\007\112\027\101\030\074\031\071\032\070\033\104" +
    "\034\073\035\103\036\075\037\066\053\111\054\120\063" +
    "\107\064\121\071\130\072\125\073\122\074\114\075\131" +
    "\076\133\077\113\100\116\101\132\102\115\001\002\000" +
    "\062\007\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\053\uffb5\054\uffb5\063" +
    "\uffb5\064\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\001\002\000" +
    "\062\007\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\uffb2\053\uffb2\054\uffb2\063" +
    "\uffb2\064\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2" +
    "\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\001\002\000" +
    "\062\007\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\053\uffb3\054\uffb3\063" +
    "\uffb3\064\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\001\002\000" +
    "\062\007\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\053\uffb1\054\uffb1\063" +
    "\uffb1\064\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1" +
    "\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\001\002\000" +
    "\062\007\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\053\uffb6\054\uffb6\063" +
    "\uffb6\064\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6" +
    "\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\001\002\000" +
    "\036\005\256\051\142\052\160\055\147\056\153\057\154" +
    "\060\146\061\152\062\157\063\150\064\143\065\155\066" +
    "\145\070\161\001\002\000\032\012\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\046\uffa1\121\uffa1\001\002\000\026\012\uffdc\107\uffdc" +
    "\110\uffdc\111\uffdc\112\uffdc\113\uffdc\114\uffdc\115\uffdc\116" +
    "\uffdc\117\uffdc\001\002\000\026\012\uffdb\107\uffdb\110\uffdb" +
    "\111\uffdb\112\uffdb\113\uffdb\114\uffdb\115\uffdb\116\uffdb\117" +
    "\uffdb\001\002\000\022\012\uffe0\111\272\112\271\113\266" +
    "\114\270\115\267\116\264\117\262\001\002\000\006\004" +
    "\uffc7\011\uffc7\001\002\000\006\004\273\011\274\001\002" +
    "\000\006\004\uffc8\011\uffc8\001\002\000\006\004\uffcf\011" +
    "\uffcf\001\002\000\006\004\uffcb\011\uffcb\001\002\000\006" +
    "\004\uffc9\011\uffc9\001\002\000\006\004\uffca\011\uffca\001" +
    "\002\000\006\004\uffcc\011\uffcc\001\002\000\006\004\uffcd" +
    "\011\uffcd\001\002\000\020\111\272\112\271\113\266\114" +
    "\270\115\267\116\264\117\262\001\002\000\030\012\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\046\uffa4\001\002\000\030\012\276" +
    "\027\101\030\074\031\071\032\070\033\104\034\073\035" +
    "\103\036\075\037\066\046\102\001\002\000\022\012\uffd0" +
    "\111\uffd0\112\uffd0\113\uffd0\114\uffd0\115\uffd0\116\uffd0\117" +
    "\uffd0\001\002\000\006\004\uffce\011\uffce\001\002\000\030" +
    "\012\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\046\uffa4\001\002\000\030" +
    "\012\302\027\101\030\074\031\071\032\070\033\104\034" +
    "\073\035\103\036\075\037\066\046\102\001\002\000\030" +
    "\012\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112\uffd5\113" +
    "\uffd5\114\uffd5\115\uffd5\116\uffd5\117\uffd5\001\002\000\030" +
    "\012\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\046\uffa4\001\002\000\030" +
    "\012\305\027\101\030\074\031\071\032\070\033\104\034" +
    "\073\035\103\036\075\037\066\046\102\001\002\000\030" +
    "\012\uffd2\105\uffd2\106\uffd2\107\uffd2\111\uffd2\112\uffd2\113" +
    "\uffd2\114\uffd2\115\uffd2\116\uffd2\117\uffd2\001\002\000\026" +
    "\012\uffd7\105\uffd7\106\uffd7\111\uffd7\112\uffd7\113\uffd7\114" +
    "\uffd7\115\uffd7\116\uffd7\117\uffd7\001\002\000\030\012\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\046\uffa4\001\002\000\030\012\311" +
    "\027\101\030\074\031\071\032\070\033\104\034\073\035" +
    "\103\036\075\037\066\046\102\001\002\000\030\012\uffd3" +
    "\105\uffd3\106\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3\114" +
    "\uffd3\115\uffd3\116\uffd3\117\uffd3\001\002\000\006\002\uffe2" +
    "\120\uffe2\001\002\000\004\002\000\001\002\000\004\011" +
    "\315\001\002\000\026\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\046\uffa4\001" +
    "\002\000\026\027\101\030\074\031\071\032\070\033\104" +
    "\034\073\035\103\036\075\037\066\046\317\001\002\000" +
    "\004\007\322\001\002\000\004\012\321\001\002\000\004" +
    "\002\uffc5\001\002\000\062\007\112\027\101\030\074\031" +
    "\071\032\070\033\104\034\073\035\103\036\075\037\066" +
    "\053\111\054\120\063\107\064\121\071\130\072\125\073" +
    "\122\074\114\075\131\076\133\077\113\100\116\101\132" +
    "\102\115\001\002\000\036\010\324\051\142\052\160\055" +
    "\147\056\153\057\154\060\146\061\152\062\157\063\150" +
    "\064\143\065\155\066\145\070\161\001\002\000\004\011" +
    "\325\001\002\000\032\012\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\046" +
    "\uffa4\121\uffa4\001\002\000\032\012\207\027\101\030\074" +
    "\031\071\032\070\033\104\034\073\035\103\036\075\037" +
    "\066\046\102\121\327\001\002\000\004\030\330\001\002" +
    "\000\004\005\331\001\002\000\004\012\332\001\002\000" +
    "\004\050\333\001\002\000\004\011\334\001\002\000\030" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\046\uffa4\121\uffa4\001\002\000\030" +
    "\027\101\030\074\031\071\032\070\033\104\034\073\035" +
    "\103\036\075\037\066\046\102\121\336\001\002\000\004" +
    "\031\337\001\002\000\004\005\340\001\002\000\004\012" +
    "\341\001\002\000\004\012\uffc4\001\002\000\032\012\uffdf" +
    "\105\057\106\063\107\uffdf\110\uffdf\111\uffdf\112\uffdf\113" +
    "\uffdf\114\uffdf\115\uffdf\116\uffdf\117\uffdf\001\002\000\026" +
    "\012\uffda\107\051\110\053\111\uffda\112\uffda\113\uffda\114" +
    "\uffda\115\uffda\116\uffda\117\uffda\001\002\000\004\012\345" +
    "\001\002\000\010\002\uffe4\104\uffe4\120\uffe4\001\002\000" +
    "\022\012\uffd1\111\uffd1\112\uffd1\113\uffd1\114\uffd1\115\uffd1" +
    "\116\uffd1\117\uffd1\001\002\000\022\012\uffe1\111\272\112" +
    "\271\113\266\114\270\115\267\116\264\117\262\001\002" +
    "\000\010\012\uffec\023\354\024\352\001\002\000\006\012" +
    "\uffea\023\354\001\002\000\004\011\363\001\002\000\004" +
    "\012\362\001\002\000\004\011\357\001\002\000\006\012" +
    "\uffeb\024\352\001\002\000\004\012\uffe9\001\002\000\030" +
    "\012\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\046\uffa4\001\002\000\030" +
    "\012\361\027\101\030\074\031\071\032\070\033\104\034" +
    "\073\035\103\036\075\037\066\046\102\001\002\000\006" +
    "\012\uffe7\024\uffe7\001\002\000\012\002\uffed\103\uffed\104" +
    "\uffed\120\uffed\001\002\000\030\012\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\046\uffa4\001\002\000\030\012\365\027\101\030\074" +
    "\031\071\032\070\033\104\034\073\035\103\036\075\037" +
    "\066\046\102\001\002\000\006\012\uffe6\023\uffe6\001\002" +
    "\000\004\012\uffe8\001\002\000\010\012\uffec\023\354\024" +
    "\352\001\002\000\004\012\371\001\002\000\014\002\uffef" +
    "\022\uffef\103\uffef\104\uffef\120\uffef\001\002\000\004\026" +
    "\373\001\002\000\004\027\027\001\002\000\006\012\376" +
    "\026\375\001\002\000\004\027\027\001\002\000\016\002" +
    "\ufff3\021\ufff3\022\ufff3\103\ufff3\104\ufff3\120\ufff3\001\002" +
    "\000\006\004\030\005\u0100\001\002\000\006\012\ufff1\026" +
    "\ufff1\001\002\000\006\004\030\005\u0102\001\002\000\006" +
    "\012\ufff2\026\ufff2\001\002\000\004\026\u0104\001\002\000" +
    "\004\027\027\001\002\000\006\012\u0107\026\u0106\001\002" +
    "\000\004\027\027\001\002\000\004\017\ufffe\001\002\000" +
    "\006\004\030\005\u0109\001\002\000\006\012\ufffc\026\ufffc" +
    "\001\002\000\006\004\030\005\u010b\001\002\000\006\012" +
    "\ufffd\026\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\006\002\003\012\004\001\001\000\002\001" +
    "\001\000\004\013\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\013\001\001\000\004\015\035\001\001" +
    "\000\002\001\001\000\006\017\017\027\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\031\027\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\037\001\001\000\002\001\001\000\004\022" +
    "\041\001\001\000\002\001\001\000\004\036\043\001\001" +
    "\000\002\001\001\000\004\037\044\001\001\000\004\040" +
    "\312\001\001\000\002\001\001\000\012\052\047\054\053" +
    "\057\051\060\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\305\001\001\000\002\001\001\000\010" +
    "\053\057\055\061\056\060\001\001\000\004\057\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\260" +
    "\001\001\000\004\055\257\001\001\000\004\056\256\001" +
    "\001\000\002\001\001\000\004\042\064\001\001\000\014" +
    "\003\075\030\077\031\076\043\071\044\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\122\004\126\005\125\006\123\007\116\010" +
    "\107\030\077\031\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\122\004\226\005" +
    "\125\006\225\007\224\010\107\030\077\031\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\033\155\034\150\035\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\122" +
    "\004\126\005\125\006\123\007\134\010\107\011\135\030" +
    "\077\031\076\001\001\000\010\033\155\034\150\035\143" +
    "\001\001\000\002\001\001\000\022\003\122\004\126\005" +
    "\125\006\123\007\140\010\107\030\077\031\076\001\001" +
    "\000\002\001\001\000\010\033\155\034\150\035\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\122" +
    "\004\126\005\125\006\123\007\164\010\107\030\077\031" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\122\004\126\005" +
    "\125\006\123\007\163\010\107\030\077\031\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\122\004\126\005\125\006\123" +
    "\007\162\010\107\030\077\031\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\122\004\126\005\125" +
    "\006\123\007\161\010\107\030\077\031\076\001\001\000" +
    "\010\033\155\034\150\035\143\001\001\000\010\033\155" +
    "\034\150\035\143\001\001\000\010\033\155\034\150\035" +
    "\143\001\001\000\010\033\155\034\150\035\143\001\001" +
    "\000\024\003\122\004\126\005\125\006\123\007\134\010" +
    "\107\011\166\030\077\031\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\205\001\001\000\014\003\075\030\077\031" +
    "\076\043\071\044\066\001\001\000\004\045\207\001\001" +
    "\000\004\046\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\214\001\001\000\014" +
    "\003\075\030\077\031\076\043\071\044\066\001\001\000" +
    "\002\001\001\000\022\003\122\004\126\005\125\006\123" +
    "\007\217\010\107\030\077\031\076\001\001\000\010\033" +
    "\155\034\150\035\143\001\001\000\002\001\001\000\004" +
    "\042\222\001\001\000\014\003\075\030\077\031\076\043" +
    "\071\044\066\001\001\000\002\001\001\000\010\033\155" +
    "\034\150\035\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\122\004\126\005\125\006\123\007\254\010" +
    "\107\030\077\031\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\155\034\150\035\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\264\050\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\276\001\001\000\004\042\274\001" +
    "\001\000\014\003\075\030\077\031\076\043\071\044\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\300\001\001\000\014\003\075\030\077\031\076\043\071" +
    "\044\066\001\001\000\002\001\001\000\004\042\303\001" +
    "\001\000\014\003\075\030\077\031\076\043\071\044\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\307\001\001\000\014\003\075\030\077\031\076\043\071" +
    "\044\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\315\001\001" +
    "\000\016\003\075\030\077\031\076\041\317\043\071\044" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\122\004\126\005\125\006\123\007" +
    "\322\010\107\030\077\031\076\001\001\000\010\033\155" +
    "\034\150\035\143\001\001\000\002\001\001\000\004\042" +
    "\325\001\001\000\014\003\075\030\077\031\076\043\071" +
    "\044\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\334\001\001\000\014\003\075\030\077\031\076\043" +
    "\071\044\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\051\343\053" +
    "\342\055\061\056\060\001\001\000\010\054\345\057\051" +
    "\060\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\346\001\001\000\006\047\264\050\262\001\001" +
    "\000\010\023\352\024\354\025\350\001\001\000\004\024" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\355\001\001\000\002\001\001\000" +
    "\004\042\357\001\001\000\014\003\075\030\077\031\076" +
    "\043\071\044\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\363\001\001\000\014\003\075\030\077" +
    "\031\076\043\071\044\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\367\024\354\025\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\373\001" +
    "\001\000\004\026\u0100\001\001\000\002\001\001\000\004" +
    "\026\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u0104\001\001\000\004\026\u0109\001\001\000\002\001" +
    "\001\000\004\026\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  TFLCompiler info = new TFLCompiler();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // else ::= ELSE LBRACE any_code RBRACE 
            {
              ArrayList<String> RESULT =null;
		int a_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> a_c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = info.createElseBlock(a_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // else ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // elseif ::= elseif ELSEIF LPAREN expression RPAREN LBRACE any_code RBRACE 
            {
              ArrayList<String> RESULT =null;
		int e_ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e_ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<String> e_if = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int a_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> a_c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = info.createElseIfBlock(e_if, expr, a_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // elseif ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // if ::= IF LPAREN expression RPAREN LBRACE any_code RBRACE elseif else 
            {
              ArrayList<String> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int a_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int a_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> a_c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e_ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e_ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> e_if = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = info.createIfBlock(expr, a_c, e_if, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // arithmetic ::= expression arithmetic_operator expression 
            {
              TFLExpression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TFLExpression expr1 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithmeticOperetor op = (ArithmeticOperetor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr2 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = info.connectByArithmeticOperator(op, expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // extr_funct_arguments ::= extr_funct_arguments COMMA expression 
            {
              TFLExpression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TFLExpression expr1 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr2 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = info.connectNumericExpressionsByComma(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extr_funct_arguments",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // extr_funct_arguments ::= expression 
            {
              TFLExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 info.checkNumericExpression(expr);
                            RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extr_funct_arguments",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // extrem_function ::= MIN LPAREN extr_funct_arguments RPAREN 
            {
              TFLExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = info.enwrapExpressionByExtremFunction(expr, "minimum"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extrem_function",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // extrem_function ::= MAX LPAREN extr_funct_arguments RPAREN 
            {
              TFLExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = info.enwrapExpressionByExtremFunction(expr, "maximum"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extrem_function",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // condition ::= expression comparison_operator expression 
            {
              TFLExpression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TFLExpression expr1 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ComparisonOperetor op = (ComparisonOperetor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr2 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = info.connectByCopmarisonOperator(op, expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // condition ::= expression boolean_operator expression 
            {
              TFLExpression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TFLExpression expr1 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BooleanOperetor op = (BooleanOperetor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr2 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = info.connectByBooleanOperator(op, expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // exists_function ::= EXISTS LPAREN B DOT LEFT RPAREN 
            {
              TFLExpression RESULT =null;
		 RESULT = info.enwrapVertexByExistsFunction(ClusterShort.B); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exists_function",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // exists_function ::= EXISTS LPAREN A DOT LEFT RPAREN 
            {
              TFLExpression RESULT =null;
		 RESULT = info.enwrapVertexByExistsFunction(ClusterShort.A); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exists_function",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= LPAREN arithmetic RPAREN 
            {
              TFLExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = info.enwrapExpressionByParenthesis(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= arithmetic 
            {
              TFLExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= extrem_function 
            {
              TFLExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= expression AMPERSAND expression 
            {
              TFLExpression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TFLExpression expr1 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr2 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = info.connectStringExpressions(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= LPAREN condition RPAREN 
            {
              TFLExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = info.enwrapExpressionByParenthesis(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= condition 
            {
              TFLExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= exists_function 
            {
              TFLExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= variable 
            {
              TFLExpression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= MINUS R_NUMBER 
            {
              TFLExpression RESULT =null;
		int r_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r_n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.REAL, "(new InfiniteReal(-" + r_n + "))"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= PLUS R_NUMBER 
            {
              TFLExpression RESULT =null;
		int r_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r_n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.REAL, "(new InfiniteReal(" + r_n + "))"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= R_NUMBER 
            {
              TFLExpression RESULT =null;
		int r_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r_n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.REAL, "(new InfiniteReal(" + r_n + "))"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= RPINF 
            {
              TFLExpression RESULT =null;
		int r_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r_n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.REAL, "(new InfiniteReal(" + r_n + "))"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= RMINF 
            {
              TFLExpression RESULT =null;
		int r_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r_n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.REAL, "(new InfiniteReal(" + r_n + "))"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= MINUS I_NUMBER 
            {
              TFLExpression RESULT =null;
		int i_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i_n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.INTEGER, "(new InfiniteInteger(-" + i_n + "))"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= PLUS I_NUMBER 
            {
              TFLExpression RESULT =null;
		int i_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i_n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.INTEGER, "(new InfiniteInteger(" + i_n + "))"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= I_NUMBER 
            {
              TFLExpression RESULT =null;
		int i_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i_n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.INTEGER, "(new InfiniteInteger(" + i_n + "))"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= IPINF 
            {
              TFLExpression RESULT =null;
		int i_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i_n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.INTEGER, "(new InfiniteInteger(" + i_n + "))"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= IMINF 
            {
              TFLExpression RESULT =null;
		int i_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i_n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.INTEGER, "(new InfiniteInteger(" + i_n + "))"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= STRING_LITERAL 
            {
              TFLExpression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TFLExpression(DataType.STRING, str); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= FALSE 
            {
              TFLExpression RESULT =null;
		 RESULT = new TFLExpression(DataType.BOOLEAN, "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= TRUE 
            {
              TFLExpression RESULT =null;
		 RESULT = new TFLExpression(DataType.BOOLEAN, "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // assignment ::= variable assignment_operator expression SEMI 
            {
              ArrayList<String> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TFLExpression expr1 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignmentOperetor op = (AssignmentOperetor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TFLExpression expr2 = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = info.connectByAssignmentOperator(op, expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // any_code ::= any_code if 
            {
              ArrayList<String> RESULT =null;
		int ar_list1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ar_list1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> ar_list1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ar_list2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ar_list2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> ar_list2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ar_list1.addAll(ar_list2);
                  RESULT = ar_list1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("any_code",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // any_code ::= any_code assignment 
            {
              ArrayList<String> RESULT =null;
		int ar_list1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ar_list1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> ar_list1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ar_list2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ar_list2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> ar_list2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ar_list1.addAll(ar_list2);
                  RESULT = ar_list1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("any_code",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // any_code ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("any_code",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arithmetic_operator ::= DIVIDE 
            {
              ArithmeticOperetor RESULT =null;
		 RESULT = ArithmeticOperetor.DIVIDE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arithmetic_operator ::= TIMES 
            {
              ArithmeticOperetor RESULT =null;
		 RESULT = ArithmeticOperetor.TIMES; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arithmetic_operator ::= MINUS 
            {
              ArithmeticOperetor RESULT =null;
		 RESULT = ArithmeticOperetor.MINUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arithmetic_operator ::= PLUS 
            {
              ArithmeticOperetor RESULT =null;
		 RESULT = ArithmeticOperetor.PLUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // boolean_operator ::= OR 
            {
              BooleanOperetor RESULT =null;
		 RESULT = BooleanOperetor.OR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // boolean_operator ::= AND 
            {
              BooleanOperetor RESULT =null;
		 RESULT = BooleanOperetor.AND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comparison_operator ::= GREATER_EQUAL 
            {
              ComparisonOperetor RESULT =null;
		 RESULT = ComparisonOperetor.GREATER_EQUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparison_operator ::= LESS_EQUAL 
            {
              ComparisonOperetor RESULT =null;
		 RESULT = ComparisonOperetor.LESS_EQUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comparison_operator ::= GREATER 
            {
              ComparisonOperetor RESULT =null;
		 RESULT = ComparisonOperetor.GREATER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparison_operator ::= LESS 
            {
              ComparisonOperetor RESULT =null;
		 RESULT = ComparisonOperetor.LESS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparison_operator ::= NOT_EQUAL 
            {
              ComparisonOperetor RESULT =null;
		 RESULT = ComparisonOperetor.NOT_EQUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparison_operator ::= EQUAL 
            {
              ComparisonOperetor RESULT =null;
		 RESULT = ComparisonOperetor.EQUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment_operator ::= AMPERSAND_ASSIGN 
            {
              AssignmentOperetor RESULT =null;
		 RESULT = AssignmentOperetor.AMPERSAND_ASSIGN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignment_operator ::= DIVIDE_ASSIGN 
            {
              AssignmentOperetor RESULT =null;
		 RESULT = AssignmentOperetor.DIVIDE_ASSIGN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment_operator ::= TIMES_ASSIGN 
            {
              AssignmentOperetor RESULT =null;
		 RESULT = AssignmentOperetor.TIMES_ASSIGN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment_operator ::= MINUS_ASSIGN 
            {
              AssignmentOperetor RESULT =null;
		 RESULT = AssignmentOperetor.MINUS_ASSIGN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment_operator ::= PLUS_ASSIGN 
            {
              AssignmentOperetor RESULT =null;
		 RESULT = AssignmentOperetor.PLUS_ASSIGN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_operator ::= ASSIGN 
            {
              AssignmentOperetor RESULT =null;
		 RESULT = AssignmentOperetor.ASSIGN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // vertex_short ::= COMMON 
            {
              VertexShort RESULT =null;
		 RESULT = VertexShort.COMMON; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vertex_short",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // vertex_short ::= BORDER 
            {
              VertexShort RESULT =null;
		 RESULT = VertexShort.BORDER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vertex_short",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // vertex_short ::= RIGHT 
            {
              VertexShort RESULT =null;
		 RESULT = VertexShort.RIGHT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vertex_short",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // vertex_short ::= LEFT 
            {
              VertexShort RESULT =null;
		 RESULT = VertexShort.LEFT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vertex_short",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cluster_short ::= CHILD 
            {
              ClusterShort RESULT =null;
		 RESULT = ClusterShort.CHILD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cluster_short",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cluster_short ::= C 
            {
              ClusterShort RESULT =null;
		 RESULT = ClusterShort.C; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cluster_short",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cluster_short ::= B 
            {
              ClusterShort RESULT =null;
		 RESULT = ClusterShort.B; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cluster_short",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cluster_short ::= A 
            {
              ClusterShort RESULT =null;
		 RESULT = ClusterShort.A; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cluster_short",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable ::= cluster_short DOT vertex_short DOT VARIABLE 
            {
              TFLExpression RESULT =null;
		int cl_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cl_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ClusterShort cl_s = (ClusterShort)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VertexShort v_s = (VertexShort)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = info.prepareExpressionFromVariable(cl_s, v_s, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable ::= cluster_short DOT VARIABLE LBRACKET vertex_short RBRACKET 
            {
              TFLExpression RESULT =null;
		int cl_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cl_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ClusterShort cl_s = (ClusterShort)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VertexShort v_s = (VertexShort)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = info.prepareExpressionFromVariable(cl_s, v, v_s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable ::= cluster_short DOT VARIABLE 
            {
              TFLExpression RESULT =null;
		int cl_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cl_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ClusterShort cl_s = (ClusterShort)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = info.prepareExpressionFromVariable(cl_s, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable ::= vertex_short DOT VARIABLE 
            {
              TFLExpression RESULT =null;
		int v_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VertexShort v_s = (VertexShort)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = info.prepareExpressionFromVariable(ClusterShort.C, v_s, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable ::= VARIABLE 
            {
              TFLExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = info.prepareExpressionFromVariable(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // body_select ::= IF LPAREN expression RPAREN LBRACE any_code SELECT A SEMI RBRACE ELSE LBRACE any_code SELECT B SEMI RBRACE 
            {
              ArrayList<String> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		TFLExpression expr = (TFLExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int a_c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int a_c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ArrayList<String> a_c1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int a_c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int a_c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<String> a_c2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = info.connectSelectIf(expr, a_c1, a_c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_select",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // select ::= SELECT_QUESTION LBRACE any_code body_select RBRACE 
            {
              Object RESULT =null;
		int ar_list1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ar_list1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ar_list1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ar_list2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ar_list2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> ar_list2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.registerBlocksForSelect(ar_list1, ar_list2);
                   info.generateMethodWithSwitch(RootBlock.SELECT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // select ::= 
            {
              Object RESULT =null;
		 info.generateMethodWithSwitch(RootBlock.SELECT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // one_cluster_type ::= LPOINT_AND_RPOINT 
            {
              BuildingBlock RESULT =null;
		 RESULT = BuildingBlock.LPOINT_AND_RPOINT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_cluster_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // one_cluster_type ::= RPOINT_OVER_LPOINT 
            {
              BuildingBlock RESULT =null;
		 RESULT = BuildingBlock.RPOINT_OVER_LPOINT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_cluster_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // one_cluster_type ::= LPOINT_OVER_RPOINT 
            {
              BuildingBlock RESULT =null;
		 RESULT = BuildingBlock.LPOINT_OVER_RPOINT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_cluster_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // one_cluster_type ::= POINT_AND_POINT 
            {
              BuildingBlock RESULT =null;
		 RESULT = BuildingBlock.POINT_AND_POINT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_cluster_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // one_cluster_type ::= POINT_AND_PATH 
            {
              BuildingBlock RESULT =null;
		 RESULT = BuildingBlock.POINT_AND_PATH; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_cluster_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // one_cluster_type ::= PATH_AND_POINT 
            {
              BuildingBlock RESULT =null;
		 RESULT = BuildingBlock.PATH_AND_POINT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_cluster_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // one_cluster_type ::= PATH_AND_PATH 
            {
              BuildingBlock RESULT =null;
		 RESULT = BuildingBlock.PATH_AND_PATH; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_cluster_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // more_cluster_types ::= more_cluster_types COMMA one_cluster_type 
            {
              ArrayList<BuildingBlock> RESULT =null;
		int arr_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arr_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<BuildingBlock> arr_list = (ArrayList<BuildingBlock>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BuildingBlock c_type = (BuildingBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arr_list.add(c_type);
                          RESULT = arr_list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_cluster_types",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // more_cluster_types ::= one_cluster_type 
            {
              ArrayList<BuildingBlock> RESULT =null;
		int c_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BuildingBlock c_type = (BuildingBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<BuildingBlock> arr_list = new ArrayList<BuildingBlock>();
                          arr_list.add(c_type);
                          RESULT = arr_list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_cluster_types",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cluster_types ::= cluster_types more_cluster_types LBRACE any_code RBRACE 
            {
              Object RESULT =null;
		int blocksleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int blocksright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<BuildingBlock> blocks = (ArrayList<BuildingBlock>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> a_c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.registerBuildingBlocks(blocks, a_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cluster_types",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cluster_types ::= 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cluster_types",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // point_parent ::= POINT_PARENT LBRACE any_code RBRACE 
            {
              Object RESULT =null;
		int a_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> a_c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.registerBuildingBlock(BuildingBlock.POINT_PARENT, a_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("point_parent",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // path_parent ::= PATH_PARENT LBRACE any_code RBRACE 
            {
              Object RESULT =null;
		int a_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> a_c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.registerBuildingBlock(BuildingBlock.PATH_PARENT, a_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path_parent",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // point_child ::= POINT_CHILD LBRACE any_code RBRACE 
            {
              Object RESULT =null;
		int a_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> a_c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.registerBuildingBlock(BuildingBlock.POINT_CHILD, a_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("point_child",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // path_child ::= PATH_CHILD LBRACE any_code RBRACE 
            {
              Object RESULT =null;
		int a_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> a_c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.registerBuildingBlock(BuildingBlock.PATH_CHILD, a_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path_child",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parent_types ::= point_parent path_parent 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parent_types",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parent_types ::= path_parent point_parent 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parent_types",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parent_types ::= point_parent 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parent_types",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parent_types ::= path_parent 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parent_types",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parent_types ::= 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parent_types",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // child_types ::= point_child path_child 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("child_types",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // child_types ::= path_child point_child 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("child_types",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // child_types ::= point_child 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("child_types",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // child_types ::= path_child 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("child_types",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // child_types ::= 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("child_types",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // body_split ::= parent_types child_types cluster_types 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_split",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // body_join ::= child_types parent_types cluster_types 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_join",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // split ::= SPLIT LBRACE body_split RBRACE 
            {
              Object RESULT =null;
		 info.generateMethodWithSwitch(RootBlock.SPLIT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("split",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // split ::= 
            {
              Object RESULT =null;
		 info.generateMethodWithSwitch(RootBlock.SPLIT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("split",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // join ::= JOIN LBRACE body_join RBRACE 
            {
              Object RESULT =null;
		 info.generateMethodWithSwitch(RootBlock.JOIN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("join",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // join ::= 
            {
              Object RESULT =null;
		 info.generateMethodWithSwitch(RootBlock.JOIN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("join",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // point ::= POINT LBRACE any_code RBRACE 
            {
              Object RESULT =null;
		int a_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> a_c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.registerBuildingBlock(BuildingBlock.POINT, a_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("point",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // path ::= PATH LBRACE any_code RBRACE 
            {
              Object RESULT =null;
		int a_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> a_c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.registerBuildingBlock(BuildingBlock.PATH, a_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // body_cd ::= point path 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_cd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // body_cd ::= path point 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_cd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // body_cd ::= point 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_cd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // body_cd ::= path 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_cd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // body_cd ::= 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_cd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // destroy ::= DESTROY LBRACE body_cd RBRACE 
            {
              Object RESULT =null;
		 info.generateMethodWithoutSwitch(RootBlock.DESTROY); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("destroy",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // destroy ::= 
            {
              Object RESULT =null;
		 info.generateMethodWithoutSwitch(RootBlock.DESTROY); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("destroy",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // create ::= CREATE LBRACE body_cd RBRACE 
            {
              Object RESULT =null;
		 info.generateMethodWithoutSwitch(RootBlock.CREATE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // create ::= 
            {
              Object RESULT =null;
		 info.generateMethodWithoutSwitch(RootBlock.CREATE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_declar ::= var_declar DATA_TYPE declar_variables SEMI 
            {
              Object RESULT =null;
		int b_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DataType b_t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arr_vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arr_vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> arr_vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.pushVarFields(b_t, arr_vs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_declar ::= DATA_TYPE declar_variables SEMI 
            {
              Object RESULT =null;
		int b_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DataType b_t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arr_vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arr_vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> arr_vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.pushVarFields(b_t, arr_vs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var ::= VAR LBRACE var_declar RBRACE 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // common_type ::= ARRAY LPAREN DATA_TYPE RPAREN 
            {
              DataType RESULT =null;
		int b_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataType b_t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = TFLCompiler.getCommonType(b_t, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("common_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // common_type ::= DATA_TYPE 
            {
              DataType RESULT =null;
		int b_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType b_t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = TFLCompiler.getCommonType(b_t, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("common_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cluster_declar ::= common_type declar_variables SEMI cluster_declar 
            {
              Object RESULT =null;
		int c_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DataType c_t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arr_vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arr_vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> arr_vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 info.pushClusterFields(c_t, arr_vs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cluster_declar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cluster_declar ::= common_type declar_variables SEMI 
            {
              Object RESULT =null;
		int c_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DataType c_t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arr_vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arr_vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> arr_vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.pushClusterFields(c_t, arr_vs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cluster_declar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cluster ::= CLUSTER LBRACE cluster_declar RBRACE 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cluster",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declar_variables ::= declar_variables COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int arr_vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arr_vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> arr_vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                       arr_vs.add(v);
                       RESULT = arr_vs;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar_variables",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declar_variables ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                       ArrayList<String> arr_vs = new ArrayList<String>();
                       arr_vs.add(v);
                       RESULT = arr_vs;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar_variables",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // vertex_declar ::= vertex_declar DATA_TYPE declar_variables SEMI 
            {
              Object RESULT =null;
		int b_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DataType b_t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arr_vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arr_vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> arr_vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.pushVertexFields(b_t, arr_vs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vertex_declar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // vertex_declar ::= DATA_TYPE declar_variables SEMI 
            {
              Object RESULT =null;
		int b_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DataType b_t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arr_vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arr_vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> arr_vs = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.pushVertexFields(b_t, arr_vs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vertex_declar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // vertex ::= VERTEX LBRACE vertex_declar RBRACE 
            {
              Object RESULT =null;
		 /* nothing to do */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vertex",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // algorithm ::= ALGORITHM LBRACE VARIABLE RBRACE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 info.setNames(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algorithm",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= algorithm vertex cluster var create destroy join split select 
            {
              TFLCompiler RESULT =null;
		 RESULT = info; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TFLCompiler start_val = (TFLCompiler)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

