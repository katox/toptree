
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 11 21:11:30 CEST 2008
//----------------------------------------------------

package org.fantomery.ttinterpreter.ttlangs.tql;

import java.util.ArrayList;
import org.fantomery.ttinterpreter.ttlangs.tql.TQLCommand;
import org.fantomery.ttinterpreter.ttlangs.tql.TQLError;
import org.fantomery.ttinterpreter.ttlangs.tql.TQLValue;
import org.fantomery.ttinterpreter.ttlangs.tql.TQLVariable;
import org.fantomery.ttinterpreter.ttlangs.tql.TQLValue.Key;
import org.fantomery.ttinterpreter.ttlangs.tql.TQLCommand.CommandType;
import org.fantomery.ttinterpreter.numbers.InfiniteInteger;
import org.fantomery.ttinterpreter.numbers.InfiniteReal;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 11 21:11:30 CEST 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\007\000\002\002\011" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\003\006\000\002\003\006\000\002\003\011\000\002\003" +
    "\011\000\002\016\003\000\002\016\005\000\002\013\005" +
    "\000\002\013\007\000\002\012\003\000\002\012\004\000" +
    "\002\012\004\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\004\006\000\002\004\006\000" +
    "\002\004\011\000\002\004\011\000\002\017\003\000\002" +
    "\017\005\000\002\020\003\000\002\020\004\000\002\014" +
    "\005\000\002\014\007\000\002\021\005\000\002\021\005" +
    "\000\002\005\006\000\002\005\006\000\002\005\011\000" +
    "\002\005\011\000\002\015\003\000\002\015\005\000\002" +
    "\006\003\000\002\006\006\000\002\006\006\000\002\006" +
    "\011\000\002\006\011\000\002\011\005\000\002\011\010" +
    "\000\002\011\010\000\002\011\013\000\002\007\005\000" +
    "\002\010\005\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\042\004\004\016\032\017\016\020\020\021" +
    "\022\022\033\023\031\024\012\025\026\026\034\027\023" +
    "\030\010\033\006\034\027\037\014\040\021\001\002\000" +
    "\004\013\221\001\002\000\004\013\220\001\002\000\006" +
    "\020\216\023\217\001\002\000\004\013\215\001\002\000" +
    "\004\005\205\001\002\000\004\013\204\001\002\000\022" +
    "\005\uffe2\006\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\035" +
    "\uffe2\036\uffe2\001\002\000\004\013\203\001\002\000\004" +
    "\005\177\001\002\000\004\002\176\001\002\000\022\005" +
    "\uffe6\006\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\035\uffe6" +
    "\036\uffe6\001\002\000\006\005\163\013\uffce\001\002\000" +
    "\022\005\uffed\006\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\035\uffed\036\uffed\001\002\000\022\005\uffe3\006\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\035\uffe3\036\uffe3\001\002" +
    "\000\022\005\uffe5\006\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\035\uffe5\036\uffe5\001\002\000\006\005\126\013\125" +
    "\001\002\000\012\005\073\011\071\035\070\036\072\001" +
    "\002\000\004\013\067\001\002\000\022\005\uffe1\006\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\035\uffe1\036\uffe1\001" +
    "\002\000\006\020\065\023\066\001\002\000\004\013\064" +
    "\001\002\000\022\005\uffea\006\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\035\uffea\036\uffea\001\002\000\022\005\uffe7" +
    "\006\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\035\uffe7\036" +
    "\uffe7\001\002\000\022\005\uffe4\006\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\035\uffe4\036\uffe4\001\002\000\006\005" +
    "\036\013\035\001\002\000\004\002\uffff\001\002\000\004" +
    "\037\041\001\002\000\006\006\057\014\051\001\002\000" +
    "\006\006\045\014\044\001\002\000\010\006\ufff1\014\ufff1" +
    "\015\042\001\002\000\030\016\032\017\016\020\020\021" +
    "\022\022\033\023\031\024\012\025\026\033\006\034\027" +
    "\040\021\001\002\000\006\006\uffef\014\uffef\001\002\000" +
    "\004\037\056\001\002\000\006\005\046\013\ufff5\001\002" +
    "\000\004\037\050\001\002\000\006\006\052\014\051\001" +
    "\002\000\004\015\042\001\002\000\004\037\053\001\002" +
    "\000\004\013\ufff3\001\002\000\004\015\054\001\002\000" +
    "\030\016\032\017\016\020\020\021\022\022\033\023\031" +
    "\024\012\025\026\033\006\034\027\040\021\001\002\000" +
    "\006\006\uffee\014\uffee\001\002\000\006\006\ufff0\014\ufff0" +
    "\001\002\000\006\005\060\013\ufff4\001\002\000\004\037" +
    "\061\001\002\000\006\006\ufff1\014\ufff1\001\002\000\006" +
    "\006\063\014\044\001\002\000\004\013\ufff2\001\002\000" +
    "\004\002\ufff6\001\002\000\022\005\uffeb\006\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\035\uffeb\036\uffeb\001\002\000" +
    "\022\005\uffe8\006\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\035\uffe8\036\uffe8\001\002\000\004\002\ufffb\001\002\000" +
    "\030\016\032\017\016\020\020\021\022\022\033\023\031" +
    "\024\012\025\026\033\006\034\027\040\021\001\002\000" +
    "\030\016\032\017\016\020\020\021\022\022\033\023\031" +
    "\024\012\025\026\033\006\034\027\040\021\001\002\000" +
    "\030\016\032\017\016\020\020\021\022\022\033\023\031" +
    "\024\012\025\026\033\006\034\027\040\021\001\002\000" +
    "\032\016\032\017\016\020\020\021\022\022\033\023\031" +
    "\024\012\025\026\033\006\034\027\037\050\040\021\001" +
    "\002\000\006\006\105\014\051\001\002\000\006\006\100" +
    "\014\077\001\002\000\006\006\uffd0\014\uffd0\001\002\000" +
    "\030\016\032\017\016\020\020\021\022\022\033\023\031" +
    "\024\012\025\026\033\006\034\027\040\021\001\002\000" +
    "\006\005\101\013\uffd4\001\002\000\004\037\050\001\002" +
    "\000\006\006\103\014\051\001\002\000\004\013\uffd2\001" +
    "\002\000\006\006\uffcf\014\uffcf\001\002\000\006\005\106" +
    "\013\uffd3\001\002\000\030\016\032\017\016\020\020\021" +
    "\022\022\033\023\031\024\012\025\026\033\006\034\027" +
    "\040\021\001\002\000\006\006\110\014\077\001\002\000" +
    "\004\013\uffd1\001\002\000\004\013\uffc5\001\002\000\004" +
    "\012\113\001\002\000\004\035\114\001\002\000\030\016" +
    "\032\017\016\020\020\021\022\022\033\023\031\024\012" +
    "\025\026\033\006\034\027\040\021\001\002\000\010\005" +
    "\uffc8\011\116\013\uffc8\001\002\000\030\016\032\017\016" +
    "\020\020\021\022\022\033\023\031\024\012\025\026\033" +
    "\006\034\027\040\021\001\002\000\004\012\120\001\002" +
    "\000\006\005\uffc6\013\uffc6\001\002\000\010\005\uffc9\011" +
    "\122\013\uffc9\001\002\000\030\016\032\017\016\020\020" +
    "\021\022\022\033\023\031\024\012\025\026\033\006\034" +
    "\027\040\021\001\002\000\004\012\124\001\002\000\006" +
    "\005\uffc7\013\uffc7\001\002\000\004\002\ufffe\001\002\000" +
    "\004\037\132\001\002\000\010\006\uffdc\014\uffdc\015\161" +
    "\001\002\000\006\006\154\014\146\001\002\000\006\006" +
    "\142\014\141\001\002\000\012\006\uffda\007\134\014\uffda" +
    "\015\uffda\001\002\000\010\006\uffd9\014\uffd9\015\uffd9\001" +
    "\002\000\006\031\135\032\136\001\002\000\004\010\140" +
    "\001\002\000\004\010\137\001\002\000\010\006\uffd5\014" +
    "\uffd5\015\uffd5\001\002\000\010\006\uffd6\014\uffd6\015\uffd6" +
    "\001\002\000\004\037\132\001\002\000\006\005\143\013" +
    "\uffdf\001\002\000\004\037\132\001\002\000\006\006\uffdc" +
    "\014\uffdc\001\002\000\006\006\147\014\146\001\002\000" +
    "\004\037\132\001\002\000\004\013\uffdd\001\002\000\006" +
    "\006\uffdb\014\uffdb\001\002\000\004\015\152\001\002\000" +
    "\030\016\032\017\016\020\020\021\022\022\033\023\031" +
    "\024\012\025\026\033\006\034\027\040\021\001\002\000" +
    "\006\006\uffd7\014\uffd7\001\002\000\006\005\155\013\uffe0" +
    "\001\002\000\004\037\132\001\002\000\004\015\161\001" +
    "\002\000\006\006\160\014\141\001\002\000\004\013\uffde" +
    "\001\002\000\030\016\032\017\016\020\020\021\022\022" +
    "\033\023\031\024\012\025\026\033\006\034\027\040\021" +
    "\001\002\000\006\006\uffd8\014\uffd8\001\002\000\032\016" +
    "\032\017\016\020\020\021\022\022\033\023\031\024\012" +
    "\025\026\033\006\034\027\037\132\040\021\001\002\000" +
    "\006\006\172\014\077\001\002\000\006\006\166\014\141" +
    "\001\002\000\006\005\167\013\uffcc\001\002\000\030\016" +
    "\032\017\016\020\020\021\022\022\033\023\031\024\012" +
    "\025\026\033\006\034\027\040\021\001\002\000\006\006" +
    "\171\014\077\001\002\000\004\013\uffca\001\002\000\006" +
    "\005\173\013\uffcd\001\002\000\004\037\132\001\002\000" +
    "\006\006\175\014\141\001\002\000\004\013\uffcb\001\002" +
    "\000\004\002\001\001\002\000\032\006\200\016\032\017" +
    "\016\020\020\021\022\022\033\023\031\024\012\025\026" +
    "\033\006\034\027\040\021\001\002\000\004\013\uffc4\001" +
    "\002\000\006\006\202\014\077\001\002\000\004\013\uffc3" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\ufff8\001" +
    "\002\000\030\016\032\017\016\020\020\021\022\022\033" +
    "\023\031\024\012\025\026\033\006\034\027\040\021\001" +
    "\002\000\006\006\210\014\207\001\002\000\030\016\032" +
    "\017\016\020\020\021\022\022\033\023\031\024\012\025" +
    "\026\033\006\034\027\040\021\001\002\000\004\013\211" +
    "\001\002\000\004\002\ufffd\001\002\000\004\006\213\001" +
    "\002\000\004\013\214\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\ufff7\001\002\000\022\005\uffec\006\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\035\uffec\036\uffec\001\002" +
    "\000\022\005\uffe9\006\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\035\uffe9\036\uffe9\001\002\000\004\002\ufff9\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\024\002\014\003\006\004\027\005\024\006" +
    "\012\007\004\010\010\011\016\012\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\036\016\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\120\001\001\000\004\012\111\001\001\000\004\012\110" +
    "\001\001\000\010\012\075\013\073\015\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\103\001\001\000\002\001\001\000\004\013\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\075\015\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\114\001\001\000" +
    "\002\001\001\000\004\012\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\130\017\127\020\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\150\001\001\000\002\001\001\000\006\017" +
    "\144\020\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\156\020\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\161\001\001\000\002\001\001\000\012\012" +
    "\075\014\164\015\163\020\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\075\015" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\173\020\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\075" +
    "\015\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\205\001\001\000\002\001\001\000\004\012\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer(message);
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the column number in the input is greater
               or equal to zero. */
            if (s.right >= 0)                    
                /* Add to the end of the StringBuffer error message
                   the column number of the error in the input. */
                m.append(" at character "+(s.right+1));
        }
    
        m.append(".");
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        throw new TQLError(m.toString());
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  /*TQLInfoClassesGenerator info = new TQLInfoClassesGenerator();*/

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function ::= VARIABLE LPAREN value_list RPAREN 
            {
              TQLCommand RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int list_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int list_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> list_val = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.FUNCTION, var, list_val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // function ::= VARIABLE LPAREN RPAREN 
            {
              TQLCommand RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new TQLCommand(CommandType.FUNCTION, var, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cut ::= value CUT value 
            {
              TQLCommand RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TQLValue val1 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLValue val2 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLCommand(CommandType.CUT, val1, val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cut",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // linked_nodes ::= value LBRACE value RBRACE LINK value LBRACE value RBRACE 
            {
              TQLValue[] RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		TQLValue val1 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TQLValue val3 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TQLValue val2 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TQLValue val4 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 TQLValue[] arr_vals = { val1, val2, val3, val4 };
                    RESULT = arr_vals; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linked_nodes",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // linked_nodes ::= value LINK value LBRACE value RBRACE 
            {
              TQLValue[] RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TQLValue val1 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TQLValue val2 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TQLValue val4 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 TQLValue[] arr_vals = { val1, val2, null, val4 };
                    RESULT = arr_vals; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linked_nodes",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // linked_nodes ::= value LBRACE value RBRACE LINK value 
            {
              TQLValue[] RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TQLValue val1 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TQLValue val3 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLValue val2 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TQLValue[] arr_vals = { val1, val2, val3, null };
                    RESULT = arr_vals; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linked_nodes",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // linked_nodes ::= value LINK value 
            {
              TQLValue[] RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TQLValue val1 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLValue val2 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TQLValue[] arr_vals = { val1, val2, null, null };
                    RESULT = arr_vals; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linked_nodes",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // link ::= linked_nodes LPAREN link_values RPAREN LPAREN value_list RPAREN 
            {
              TQLCommand RESULT =null;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TQLValue[] nodes = (TQLValue[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int init_valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int init_valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<TQLValue> init_values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.LINK, nodes, values, init_values); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // link ::= linked_nodes LPAREN value_list RPAREN LPAREN link_values RPAREN 
            {
              TQLCommand RESULT =null;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TQLValue[] nodes = (TQLValue[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<TQLValue> values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int init_valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int init_valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> init_values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.LINK, nodes, values, init_values); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // link ::= linked_nodes LPAREN link_values RPAREN 
            {
              TQLCommand RESULT =null;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TQLValue[] nodes = (TQLValue[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int init_valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int init_valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> init_values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.LINK, nodes, null,   init_values); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // link ::= linked_nodes LPAREN value_list RPAREN 
            {
              TQLCommand RESULT =null;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TQLValue[] nodes = (TQLValue[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.LINK, nodes, values, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // link ::= linked_nodes 
            {
              TQLCommand RESULT =null;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLValue[] nodes = (TQLValue[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLCommand(CommandType.LINK, nodes, null,   null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value_list ::= value_list COMMA value 
            {
              ArrayList<TQLValue> RESULT =null;
		int list_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int list_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<TQLValue> list_val = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list_val.add(val);
                  RESULT = list_val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value_list ::= value 
            {
              ArrayList<TQLValue> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<TQLValue> list_val = new ArrayList<TQLValue>();
                  list_val.add(val);
                  RESULT = list_val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // node ::= value LPAREN node_values RPAREN LPAREN value_list RPAREN 
            {
              TQLCommand RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int init_valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int init_valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<TQLValue> init_values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.NODE, val, values, init_values); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // node ::= value LPAREN value_list RPAREN LPAREN node_values RPAREN 
            {
              TQLCommand RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<TQLValue> values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int init_valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int init_valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> init_values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.NODE, val, values, init_values); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // node ::= value LPAREN node_values RPAREN 
            {
              TQLCommand RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int init_valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int init_valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> init_values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.NODE, val, null,   init_values); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // node ::= value LPAREN value_list RPAREN 
            {
              TQLCommand RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> values = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.NODE, val, values, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // vertex_name ::= LBRACKET R RBRACKET 
            {
              Key RESULT =null;
		 RESULT = Key.R; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vertex_name",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // vertex_name ::= LBRACKET L RBRACKET 
            {
              Key RESULT =null;
		 RESULT = Key.L; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vertex_name",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // link_values ::= link_values COMMA link_variable ASSIGN value 
            {
              ArrayList<TQLValue> RESULT =null;
		int list_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int list_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<TQLValue> list_val = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TQLVariable var = (TQLVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 val.setName(var.getName());
                        if (var.isArray()) val.setKey(var.getKey());
                        list_val.add(val);
                        RESULT = list_val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_values",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // link_values ::= link_variable ASSIGN value 
            {
              ArrayList<TQLValue> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TQLVariable var = (TQLVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<TQLValue> list_val = new ArrayList<TQLValue>();
                        val.setName(var.getName());
                        if (var.isArray()) val.setKey(var.getKey());
                        list_val.add(val);
                        RESULT = list_val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_values",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // link_variable ::= VARIABLE vertex_name 
            {
              TQLVariable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Key key = (Key)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLVariable(var, key); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // link_variable ::= VARIABLE 
            {
              TQLVariable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLVariable(var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_variable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // link_variables ::= link_variables COMMA link_variable 
            {
              ArrayList<TQLVariable> RESULT =null;
		int list_varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int list_varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<TQLVariable> list_var = (ArrayList<TQLVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLVariable var = (TQLVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list_var.add(var);
                        RESULT = list_var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_variables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // link_variables ::= link_variable 
            {
              ArrayList<TQLVariable> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLVariable var = (TQLVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<TQLVariable> list_var = new ArrayList<TQLVariable>();
                        list_var.add(var);
                        RESULT = list_var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_variables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // link_declaration ::= EDGE LPAREN link_values RPAREN LPAREN link_variables RPAREN 
            {
              TQLCommand RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<TQLValue> vals = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLVariable> vars = (ArrayList<TQLVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.LINK_DECLARATION, vars, vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // link_declaration ::= EDGE LPAREN link_variables RPAREN LPAREN link_values RPAREN 
            {
              TQLCommand RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<TQLVariable> vars = (ArrayList<TQLVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> vals = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.LINK_DECLARATION, vars, vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // link_declaration ::= EDGE LPAREN link_values RPAREN 
            {
              TQLCommand RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> vals = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.LINK_DECLARATION, new ArrayList<TQLVariable>(), vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // link_declaration ::= EDGE LPAREN link_variables RPAREN 
            {
              TQLCommand RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLVariable> vars = (ArrayList<TQLVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.LINK_DECLARATION, vars, new ArrayList<TQLValue>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= FALSE 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // value ::= TRUE 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // value ::= STRING_LITERAL 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // value ::= RPINF 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InfiniteReal val = (InfiniteReal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // value ::= RMINF 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InfiniteReal val = (InfiniteReal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= IPINF 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InfiniteInteger val = (InfiniteInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= IMINF 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InfiniteInteger val = (InfiniteInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // value ::= MINUS R_NUMBER 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InfiniteReal val = (InfiniteReal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val.times(new InfiniteReal(-1.0))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // value ::= PLUS R_NUMBER 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InfiniteReal val = (InfiniteReal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // value ::= R_NUMBER 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InfiniteReal val = (InfiniteReal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // value ::= MINUS I_NUMBER 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InfiniteInteger val = (InfiniteInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val.times(new InfiniteInteger(-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // value ::= PLUS I_NUMBER 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InfiniteInteger val = (InfiniteInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // value ::= I_NUMBER 
            {
              TQLValue RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InfiniteInteger val = (InfiniteInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TQLValue(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // node_values ::= node_values COMMA VARIABLE ASSIGN value 
            {
              ArrayList<TQLValue> RESULT =null;
		int list_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int list_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<TQLValue> list_val = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 val.setName(str);
                        list_val.add(val);
                        RESULT = list_val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node_values",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // node_values ::= VARIABLE ASSIGN value 
            {
              ArrayList<TQLValue> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<TQLValue> list_val = new ArrayList<TQLValue>();
                        val.setName(str);
                        list_val.add(val);
                        RESULT = list_val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node_values",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= variables COMMA VARIABLE 
            {
              ArrayList<TQLVariable> RESULT =null;
		int list_varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int list_varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<TQLVariable> list_var = (ArrayList<TQLVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list_var.add(new TQLVariable(str));
                        RESULT = list_var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= VARIABLE 
            {
              ArrayList<TQLVariable> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<TQLVariable> list_var = new ArrayList<TQLVariable>();
                        list_var.add(new TQLVariable(str));
                        RESULT = list_var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // node_declaration ::= NODE LPAREN node_values RPAREN LPAREN variables RPAREN 
            {
              TQLCommand RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<TQLValue> vals = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLVariable> vars = (ArrayList<TQLVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.NODE_DECLARATION, vars, vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // node_declaration ::= NODE LPAREN variables RPAREN LPAREN node_values RPAREN 
            {
              TQLCommand RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<TQLVariable> vars = (ArrayList<TQLVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> vals = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.NODE_DECLARATION, vars, vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // node_declaration ::= NODE LPAREN node_values RPAREN 
            {
              TQLCommand RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLValue> vals = (ArrayList<TQLValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.NODE_DECLARATION, new ArrayList<TQLVariable>(), vals); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // node_declaration ::= NODE LPAREN variables RPAREN 
            {
              TQLCommand RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<TQLVariable> vars = (ArrayList<TQLVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TQLCommand(CommandType.NODE_DECLARATION, vars, new ArrayList<TQLValue>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= link_declaration SEMI 
            {
              TQLCommand RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TQLCommand com = (TQLCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = com; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= node_declaration SEMI 
            {
              TQLCommand RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TQLCommand com = (TQLCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = com; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= function SEMI 
            {
              TQLCommand RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TQLCommand com = (TQLCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = com; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program ::= cut SEMI 
            {
              TQLCommand RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TQLCommand com = (TQLCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = com; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program ::= link SEMI 
            {
              TQLCommand RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TQLCommand com = (TQLCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = com; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= node SEMI 
            {
              TQLCommand RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TQLCommand com = (TQLCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = com; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= INFO LPAREN value COMMA value RPAREN SEMI 
            {
              TQLCommand RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TQLValue val1 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TQLValue val2 = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new TQLCommand(CommandType.LINK_INFO, val1, val2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= INFO LPAREN value RPAREN SEMI 
            {
              TQLCommand RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TQLValue val = (TQLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new TQLCommand(CommandType.NODE_INFO, val, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= EDGE SEMI 
            {
              TQLCommand RESULT =null;
		 RESULT = new TQLCommand(CommandType.LINK_DECLAR_INFO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NODE SEMI 
            {
              TQLCommand RESULT =null;
		 RESULT = new TQLCommand(CommandType.NODE_DECLAR_INFO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= EXIT SEMI 
            {
              TQLCommand RESULT =null;
		 RESULT = new TQLCommand(CommandType.EXIT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TQLCommand start_val = (TQLCommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

